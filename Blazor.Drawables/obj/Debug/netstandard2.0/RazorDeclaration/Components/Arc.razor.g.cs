#pragma checksum "C:\Users\Shivendra\source\repos\Blazor.Test.Components\Blazor.Drawables\Components\Arc.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5d5fb16d370ef38ca7ace677d4bacf483ee8dec2"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blazor.Drawables.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\Shivendra\source\repos\Blazor.Test.Components\Blazor.Drawables\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 2 "C:\Users\Shivendra\source\repos\Blazor.Test.Components\Blazor.Drawables\_Imports.razor"
using System.Drawing;

#line default
#line hidden
    public partial class Arc : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 75 "C:\Users\Shivendra\source\repos\Blazor.Test.Components\Blazor.Drawables\Components\Arc.razor"
 
    [Parameter]
    public int X { get; set; }
    [Parameter]
    public int Y { get; set; }
    [Parameter]
    public double Radius { get; set; }
    [Parameter]
    public double StartAngle { get; set; }
    [Parameter]
    public double EndAngle { get; set; }
    [Parameter]
    public double Opacity { get; set; } = 1;
    [Parameter]
    public bool NoFill { get; set; }
    [Parameter]
    public System.Drawing.Color Color { get; set; }
    [Parameter]
    public bool NoStroke { get; set; }
    [Parameter]
    public Color StrokeColor { get; set; }
    [Parameter]
    public double StrokeWidth { get; set; } = 1;
    [Parameter]
    public StrokeLineCap Cap { get; set; }
    [Parameter]
    public StrokeLineJoin Join { get; set; }
    [Parameter]
    public int StrokeDashArray { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnDoubleClick { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseMove { get; set; }
    [Parameter]
    public EventCallback<WheelEventArgs> OnMouseWheel { get; set; }
    [Parameter]
    public EventCallback<DragEventArgs> OnDrag { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnMousePressed { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseReleased { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOut { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnMouseOver { get; set; }
    [Parameter]
    public ArcMode Mode { get; set; } = ArcMode.PIE;
    public enum ArcMode
    {
        PIE,
        OPEN,
        CHORD
    }

    private (double,double) PolarToCartesian(int centerX, int centerY,double radius,double angleInDegrees)
    {
        var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;

        return
            (centerX + (radius * Math.Cos(angleInRadians)),
            centerY + (radius * Math.Sin(angleInRadians))
            );
    }
    private string DescribeArc(int x,int y,double radius, double startAngle,double endAngle)
    {

        var start = PolarToCartesian(x, y, radius, endAngle);
        var end = PolarToCartesian(x, y, radius, startAngle);

        var arcSweep = endAngle - startAngle <= 180 ? "0" : "1";

        var path="";
        if(Mode==Arc.ArcMode.PIE)
            path= $"M {start.Item1} {start.Item2} A {radius} {radius} 0 {arcSweep} 0 {end.Item1} {end.Item2} L {x} {y} L {start.Item1} {start.Item2}";
        else if(Mode==ArcMode.OPEN)
            path = $"M {start.Item1} {start.Item2} A {radius} {radius} 0 {arcSweep} 0 {end.Item1} {end.Item2} ";
        else
            path = $"M {start.Item1} {start.Item2} A {radius} {radius} 0 {arcSweep} 0 {end.Item1} {end.Item2} L {end.Item1} {end.Item2} L {start.Item1} {start.Item2}";

        //var d = [
        //    "M", start.x, start.y,
        //    "A", radius, radius, 0, arcSweep, 0, end.x, end.y,
        //    "L", x, y,
        //    "L", start.x, start.y
        //].join(" ");

        return path;
    }

    private string GetPath()
    {
        return DescribeArc(X,Y,Radius,StartAngle,EndAngle);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
